// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	testing "testing"

	mock "github.com/stretchr/testify/mock"

	tool "vidlearn-final-projcect/business/tool"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CreateTool provides a mock function with given fields: _a0
func (_m *Repository) CreateTool(_a0 *tool.Tool) (*tool.Tool, error) {
	ret := _m.Called(_a0)

	var r0 *tool.Tool
	if rf, ok := ret.Get(0).(func(*tool.Tool) *tool.Tool); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tool.Tool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*tool.Tool) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTool provides a mock function with given fields: ID
func (_m *Repository) DeleteTool(ID int) (*tool.Tool, error) {
	ret := _m.Called(ID)

	var r0 *tool.Tool
	if rf, ok := ret.Get(0).(func(int) *tool.Tool); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tool.Tool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllTool provides a mock function with given fields:
func (_m *Repository) GetAllTool() ([]*tool.Tool, error) {
	ret := _m.Called()

	var r0 []*tool.Tool
	if rf, ok := ret.Get(0).(func() []*tool.Tool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*tool.Tool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetToolByID provides a mock function with given fields: ID
func (_m *Repository) GetToolByID(ID int) (*tool.Tool, error) {
	ret := _m.Called(ID)

	var r0 *tool.Tool
	if rf, ok := ret.Get(0).(func(int) *tool.Tool); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tool.Tool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTool provides a mock function with given fields: toolCurrent, IDCurrent
func (_m *Repository) UpdateTool(toolCurrent *tool.Tool, IDCurrent int) (*tool.Tool, error) {
	ret := _m.Called(toolCurrent, IDCurrent)

	var r0 *tool.Tool
	if rf, ok := ret.Get(0).(func(*tool.Tool, int) *tool.Tool); ok {
		r0 = rf(toolCurrent, IDCurrent)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tool.Tool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*tool.Tool, int) error); ok {
		r1 = rf(toolCurrent, IDCurrent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t testing.TB) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
