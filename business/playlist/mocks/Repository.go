// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	playlist "vidlearn-final-projcect/business/playlist"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CreatePlaylist provides a mock function with given fields: _a0
func (_m *Repository) CreatePlaylist(_a0 *playlist.Playlist) (*playlist.Playlist, error) {
	ret := _m.Called(_a0)

	var r0 *playlist.Playlist
	if rf, ok := ret.Get(0).(func(*playlist.Playlist) *playlist.Playlist); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*playlist.Playlist)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*playlist.Playlist) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePlaylist provides a mock function with given fields: ID
func (_m *Repository) DeletePlaylist(ID int) (*playlist.Playlist, error) {
	ret := _m.Called(ID)

	var r0 *playlist.Playlist
	if rf, ok := ret.Get(0).(func(int) *playlist.Playlist); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*playlist.Playlist)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllPlaylist provides a mock function with given fields:
func (_m *Repository) GetAllPlaylist() ([]*playlist.Playlist, error) {
	ret := _m.Called()

	var r0 []*playlist.Playlist
	if rf, ok := ret.Get(0).(func() []*playlist.Playlist); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*playlist.Playlist)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPlaylistByID provides a mock function with given fields: ID
func (_m *Repository) GetPlaylistByID(ID int) (*playlist.Playlist, error) {
	ret := _m.Called(ID)

	var r0 *playlist.Playlist
	if rf, ok := ret.Get(0).(func(int) *playlist.Playlist); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*playlist.Playlist)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePlaylist provides a mock function with given fields: playlistCurrent, IDCurrent
func (_m *Repository) UpdatePlaylist(playlistCurrent *playlist.Playlist, IDCurrent int) (*playlist.Playlist, error) {
	ret := _m.Called(playlistCurrent, IDCurrent)

	var r0 *playlist.Playlist
	if rf, ok := ret.Get(0).(func(*playlist.Playlist, int) *playlist.Playlist); ok {
		r0 = rf(playlistCurrent, IDCurrent)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*playlist.Playlist)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*playlist.Playlist, int) error); ok {
		r1 = rf(playlistCurrent, IDCurrent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t testing.TB) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
