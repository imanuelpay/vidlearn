// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	testing "testing"
	playlist_tool "vidlearn-final-projcect/business/playlist_tool"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CreatePlaylistTool provides a mock function with given fields: playlist_tools
func (_m *Repository) CreatePlaylistTool(playlist_tools *playlist_tool.PlaylistTool) (*playlist_tool.PlaylistTool, error) {
	ret := _m.Called(playlist_tools)

	var r0 *playlist_tool.PlaylistTool
	if rf, ok := ret.Get(0).(func(*playlist_tool.PlaylistTool) *playlist_tool.PlaylistTool); ok {
		r0 = rf(playlist_tools)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*playlist_tool.PlaylistTool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*playlist_tool.PlaylistTool) error); ok {
		r1 = rf(playlist_tools)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePlaylistTool provides a mock function with given fields: playlistID, toolID
func (_m *Repository) DeletePlaylistTool(playlistID int, toolID int) (*playlist_tool.PlaylistTool, error) {
	ret := _m.Called(playlistID, toolID)

	var r0 *playlist_tool.PlaylistTool
	if rf, ok := ret.Get(0).(func(int, int) *playlist_tool.PlaylistTool); ok {
		r0 = rf(playlistID, toolID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*playlist_tool.PlaylistTool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(playlistID, toolID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPlaylistByTool provides a mock function with given fields: toolID
func (_m *Repository) GetPlaylistByTool(toolID int) ([]*playlist_tool.PlaylistTool, error) {
	ret := _m.Called(toolID)

	var r0 []*playlist_tool.PlaylistTool
	if rf, ok := ret.Get(0).(func(int) []*playlist_tool.PlaylistTool); ok {
		r0 = rf(toolID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*playlist_tool.PlaylistTool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(toolID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetToolByPlaylist provides a mock function with given fields: playlistID
func (_m *Repository) GetToolByPlaylist(playlistID int) ([]*playlist_tool.PlaylistTool, error) {
	ret := _m.Called(playlistID)

	var r0 []*playlist_tool.PlaylistTool
	if rf, ok := ret.Get(0).(func(int) []*playlist_tool.PlaylistTool); ok {
		r0 = rf(playlistID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*playlist_tool.PlaylistTool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(playlistID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t testing.TB) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
